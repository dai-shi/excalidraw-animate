{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncIterator.js","../node_modules/browser-fs-access/dist/fs-access-legacy/directory-open.mjs"],"names":["_asyncIterator","iterable","method","Symbol","asyncIterator","call","iterator","TypeError","e","t","r","a","i","name","n","s","o","isFile","push","getFile","then","directoryHandle","Object","defineProperty","configurable","enumerable","get","isDirectory","getEntries","Promise","all","flat","recursive","window","chooseFileSystemEntries","type"],"mappings":"+HAAe,SAASA,EAAeC,GACrC,IAAIC,EAEJ,GAAsB,qBAAXC,OAAwB,CACjC,GAAIA,OAAOC,eAEK,OADdF,EAASD,EAASE,OAAOC,gBACL,OAAOF,EAAOG,KAAKJ,GAGzC,GAAIE,OAAOG,UAEK,OADdJ,EAASD,EAASE,OAAOG,WACL,OAAOJ,EAAOG,KAAKJ,GAI3C,MAAM,IAAIM,UAAU,gCAftB,mC,wECCMC,EAAC,qCAAC,WAAMC,EAAEC,GAAR,MAAAC,EAAA,2FAAUC,EAAV,+BAAYH,EAAEI,KAAcF,EAAE,GAAGG,EAAE,GAAnC,oCAAsDC,EAAtD,EAAiFC,EAAC,UAAIJ,EAAJ,YAASG,EAAEF,MAAOE,EAAEE,OAAOH,EAAEI,KAAKH,EAAEI,UAAUC,MAAM,SAAAZ,GAAC,OAAGA,EAAEa,gBAAgBZ,EAAEa,OAAOC,eAAef,EAAE,qBAAqB,CAACgB,cAAa,EAAGC,YAAW,EAAGC,IAAI,kBAAIV,SAAQD,EAAEY,aAAajB,GAAGC,EAAEO,KAAKV,EAAEO,EAAEL,EAAEM,KAAzR,cAA2DP,EAAEmB,cAA7D,gdAA8SC,QAAQC,IAAInB,GAA1T,2BAA8ToB,OAA9T,uCAA8UF,QAAQC,IAAIhB,GAA1V,+KAAD,wDAAgW,8BAAe,uGAAML,EAAN,+BAAQ,IAAQuB,UAAUvB,EAAEuB,YAAW,EAAvC,SAAwDC,OAAOC,wBAAwB,CAACC,KAAK,mBAA7F,cAAgDzB,EAAhD,yBAAuHF,EAAEE,EAAED,EAAEuB,YAA7H","file":"static/js/3.e61c313b.chunk.js","sourcesContent":["export default function _asyncIterator(iterable) {\n  var method;\n\n  if (typeof Symbol !== \"undefined\") {\n    if (Symbol.asyncIterator) {\n      method = iterable[Symbol.asyncIterator];\n      if (method != null) return method.call(iterable);\n    }\n\n    if (Symbol.iterator) {\n      method = iterable[Symbol.iterator];\n      if (method != null) return method.call(iterable);\n    }\n  }\n\n  throw new TypeError(\"Object is not async iterable\");\n}","// @license Â© 2020 Google LLC. Licensed under the Apache License, Version 2.0.\nconst e=async(t,r,i=t.name)=>{const a=[],n=[];for await(const s of t.getEntries()){const o=`${i}/${s.name}`;s.isFile?n.push(s.getFile().then((e=>(e.directoryHandle=t,Object.defineProperty(e,\"webkitRelativePath\",{configurable:!0,enumerable:!0,get:()=>o}))))):s.isDirectory&&r&&a.push(e(s,r,o))}return[...(await Promise.all(a)).flat(),...await Promise.all(n)]};export default async(t={})=>{t.recursive=t.recursive||!1;const r=await window.chooseFileSystemEntries({type:\"open-directory\"});return e(r,t.recursive)};"],"sourceRoot":""}