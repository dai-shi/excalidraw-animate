{"version":3,"sources":["../node_modules/browser-fs-access/dist/fs-access/directory-open.mjs","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncIterator.js"],"names":["e","t","r","a","name","i","n","o","kind","push","getFile","then","Object","defineProperty","configurable","enumerable","get","values","Promise","all","flat","recursive","window","showDirectoryPicker","_asyncIterator","iterable","method","Symbol","asyncIterator","call","iterator","TypeError"],"mappings":"yKACMA,EAAC,qCAAC,WAAMC,EAAEC,GAAR,IAAAC,EAAA,6FAAUA,EAAV,+BAAYF,EAAEG,KAAcC,EAAE,GAAGC,EAAE,GAAnC,oCAAsDC,EAAtD,EAA6EN,EAAC,UAAIE,EAAJ,YAASI,EAAEH,MAAO,SAASG,EAAEC,KAAKF,EAAEG,KAAKF,EAAEG,UAAUC,MAAM,SAAAX,GAAC,OAAEY,OAAOC,eAAeb,EAAE,qBAAqB,CAACc,cAAa,EAAGC,YAAW,EAAGC,IAAI,kBAAIf,SAAO,cAAcM,EAAEC,MAAMN,GAAGG,EAAEI,KAAKT,EAAEO,EAAEL,EAAED,KAA7Q,cAA2DA,EAAEgB,UAA7D,gdAAkSC,QAAQC,IAAId,GAA9S,2BAAkTe,OAAlT,uCAAkUF,QAAQC,IAAIb,GAA9U,+KAAD,wDAAoV,8BAAe,uGAAML,EAAN,+BAAQ,IAAQoB,UAAUpB,EAAEoB,YAAW,EAAvC,SAAwDC,OAAOC,sBAA/D,cAAgDrB,EAAhD,yBAA4FF,EAAEE,EAAED,EAAEoB,YAAlG,4C,gCCD3V,SAASG,EAAeC,GACrC,IAAIC,EAEJ,GAAsB,qBAAXC,OAAwB,CACjC,GAAIA,OAAOC,eAEK,OADdF,EAASD,EAASE,OAAOC,gBACL,OAAOF,EAAOG,KAAKJ,GAGzC,GAAIE,OAAOG,UAEK,OADdJ,EAASD,EAASE,OAAOG,WACL,OAAOJ,EAAOG,KAAKJ,GAI3C,MAAM,IAAIM,UAAU,gCAftB","file":"static/js/40.bf6218c5.chunk.js","sourcesContent":["// @license Â© 2020 Google LLC. Licensed under the Apache License, Version 2.0.\nconst e=async(t,r,a=t.name)=>{const i=[],n=[];for await(const o of t.values()){const t=`${a}/${o.name}`;\"file\"===o.kind?n.push(o.getFile().then((e=>Object.defineProperty(e,\"webkitRelativePath\",{configurable:!0,enumerable:!0,get:()=>t})))):\"directory\"===o.kind&&r&&i.push(e(o,r,t))}return[...(await Promise.all(i)).flat(),...await Promise.all(n)]};export default async(t={})=>{t.recursive=t.recursive||!1;const r=await window.showDirectoryPicker();return e(r,t.recursive)};","export default function _asyncIterator(iterable) {\n  var method;\n\n  if (typeof Symbol !== \"undefined\") {\n    if (Symbol.asyncIterator) {\n      method = iterable[Symbol.asyncIterator];\n      if (method != null) return method.call(iterable);\n    }\n\n    if (Symbol.iterator) {\n      method = iterable[Symbol.iterator];\n      if (method != null) return method.call(iterable);\n    }\n  }\n\n  throw new TypeError(\"Object is not async iterable\");\n}"],"sourceRoot":""}